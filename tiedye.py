#!/usr/bin/env python3
"""
spiral_from_ascii.py (3-arm version, full vertical coverage)

Enhancements:
- Spiral now extends all the way to the bottom of the terminal.
- Adds a third spiral arm for a triskelion-like symmetry.
- Preserves dynamic color swirl and scaling.
"""

import os, sys, time, math, shutil, signal

# -------------------------
# PRE-RENDERED ASCII ART (same as original)
# -------------------------
ART = r"""
........................................................................................................
...........................................:::::::=*#%@@%#*+=:..........................................
.....................................:::::::-=+*#%@@@@@@@@@@@@%#*+=-:...................................
..................................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@%#*+=-::..............................
...............................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-::.........................
.............................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-::...................
...........................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-::...............
.........................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-::...........
.......................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-::........
......................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-:......
....................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-:....
...................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=-:
..................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#*+=
.................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#
................:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
...............:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
..............:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.............:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%
............:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@
...........:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@
..........:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
.........:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
........:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
.......:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
......:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
.....:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
....:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@
...:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
..:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
.:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
:::::::-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
.:::::::-=+*#%@@@@@@@@@@@%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
..:::::::-=+*#%@@@@@%*=-:......:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
...:::::::-=+*#%@@#=:..............:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
....:::::::-=+*#*=:....................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
.....:::::::-=+*=-:......................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@
......:::::::-=+:-:........................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@
.......:::::::-:............................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@
........:::::::-:.............................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@
.........:::::::::..............................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@
..........:::::::::...............................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@
...........::::::::::.................................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@
............:::::::::::.................................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@
.............:::::::::::::.................................:-=+*#%@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@
..............::::::::::::::.................................:-=+*#%@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@
...............:::::::::::::::::.................................:-=+*#%@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@
................::::::::::::::::::.................................:-=+*#%@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@
.................:::::::::::::::::::::.................................:-=+*#%@@%@@@@@@@@@@@@@@@@@@@@@@@@@
..................::::::::::::::::::::::.................................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@
....................:::::::::::::::::::::::................................:-=+*#%@@@@@@@@@@@@@@@@@@@@@@@
........................................................................................................
"""

# -------------------------
# Utility & color functions
# -------------------------
def supports_truecolor():
    ct = os.environ.get("COLORTERM", "").lower()
    return "truecolor" in ct or "24bit" in ct or True

def hide_cursor(): sys.stdout.write("\033[?25l")
def show_cursor(): sys.stdout.write("\033[?25h")
def move_cursor_home(): sys.stdout.write("\033[H")
def clear_screen(): sys.stdout.write("\033[2J")
def flush(): sys.stdout.flush()

def hsv_to_rgb(h, s, v):
    i = int(h * 6)
    f = h * 6 - i
    p, q, t = v * (1 - s), v * (1 - s * f), v * (1 - s * (1 - f))
    i = i % 6
    if i == 0: r, g, b = v, t, p
    elif i == 1: r, g, b = q, v, p
    elif i == 2: r, g, b = p, v, t
    elif i == 3: r, g, b = p, q, v
    elif i == 4: r, g, b = t, p, v
    else: r, g, b = v, p, q
    return int(r*255), int(g*255), int(b*255)

def rgb_to_truecolor_seq(r,g,b): return f"\033[38;2;{r};{g};{b}m"

# -------------------------
# Art setup
# -------------------------
art_lines = [line.rstrip("\n") for line in ART.splitlines() if line.strip("\n") != ""]
orig_h, orig_w = len(art_lines), max(len(line) for line in art_lines)
for i in range(len(art_lines)):
    art_lines[i] = art_lines[i].ljust(orig_w)

CHAR_ASPECT = 0.8  # slightly taller to fill the bottom better

def get_terminal_size():
    cols, rows = shutil.get_terminal_size((80, 24))
    return cols, rows

def scale_art_to_terminal(cols, rows):
    target_w = max(20, cols)
    art_ratio = orig_h / orig_w
    target_h = int(target_w * art_ratio * CHAR_ASPECT)
    if target_h > rows:
        target_h = rows
        target_w = max(20, int(target_h / (art_ratio * CHAR_ASPECT)))
    scaled = []
    for y in range(target_h):
        sy = int((y / max(1, target_h - 1)) * (orig_h - 1))
        row = []
        for x in range(target_w):
            sx = int((x / max(1, target_w - 1)) * (orig_w - 1))
            row.append(art_lines[sy][sx])
        scaled.append(row)
    return scaled

# -------------------------
# Animation
# -------------------------
def run_animation():
    use_true = supports_truecolor()
    cols, rows = get_terminal_size()
    scaled = scale_art_to_terminal(cols, rows)
    H, W = len(scaled), len(scaled[0])
    cx, cy = (W - 1) / 2.0, (H - 1) / 2.0
    max_r = math.hypot(cx, cy)
    arms = 3  # triple-arm spiral

    FPS = 20.0
    delay = 1.0 / FPS
    swirl_speed = 0.07
    spiral_strength = 1.3
    outward_speed = 0.25

    time0 = time.time()
    hide_cursor()
    clear_screen()
    try:
        while True:
            t = time.time() - time0
            move_cursor_home()
            lines = []
            for y in range(H):
                parts = []
                for x in range(W):
                    rx, ry = x - cx, y - cy
                    r = math.hypot(rx, ry) / max_r
                    ang = math.atan2(ry, rx)
                    r_out = (r - outward_speed * t) % 1.0
                    ch = " "
                    for k in range(arms):
                        arm_angle = ang + (k * 2 * math.pi / arms)
                        rot = swirl_speed * t + r_out * spiral_strength
                        new_ang = arm_angle - rot
                        rx_new = r_out * max_r * math.cos(new_ang)
                        ry_new = r_out * max_r * math.sin(new_ang)
                        x_disp = int(round(cx + rx_new))
                        y_disp = int(round(cy + ry_new))
                        if 0 <= x_disp < W and 0 <= y_disp < H:
                            c = scaled[y_disp][x_disp]
                            if c != " ":
                                ch = c
                    if ch == " ":
                        parts.append(" ")
                        continue
                    hue = ((ang / (2*math.pi)) + (t*0.08) + (r_out*2.5)) % 1.0
                    sat = 0.9
                    val = 0.8
                    rcol, gcol, bcol = hsv_to_rgb(hue, sat, val)
                    seq = rgb_to_truecolor_seq(rcol, gcol, bcol)
                    parts.append(f"{seq}{ch}\033[0m")
                lines.append("".join(parts))
            sys.stdout.write("\n".join(lines))
            flush()
            time.sleep(delay)
    except KeyboardInterrupt:
        move_cursor_home()
        clear_screen()
        show_cursor()
        print("Exited gracefully.")

if __name__ == "__main__":
    run_animation()
